# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 225 layers,  3,157,200 parameters,  3157184 gradients,   8.9 GFLOPs
  # s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  # m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  # l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  # x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2  
  # ìž…ë ¥ : (32, 3, 640, 640), ì¶œë ¥ : (32, (64, 320, 320)
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  # ìž…ë ¥ : (32, 64, 320, 320), ì¶œë ¥ : (32, (128 , 160, 160)
  - [-1, 6, C3, [128, True]]
  # ìž…ë ¥ : (32, 128, 160, 160), ì¶œë ¥ : (32, (128, 160, 160)
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  # ìž…ë ¥ : (32, 128, 160, 160), ì¶œë ¥ : (32, (256, 80, 80)
  - [-1, 8, C3, [256, True]]
  # ìž…ë ¥ : (32, 256, 80, 80), ì¶œë ¥ : (32, (256, 80, 80)
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  # ìž…ë ¥ : (32, 256, 80, 80), ì¶œë ¥ : (32, (512, 40, 40)
  - [-1, 8, C3, [512, True]]
  # ìž…ë ¥ : (32, 512, 40, 40), ì¶œë ¥ : (32, (512, 40, 40)
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
  # ìž…ë ¥ : (32, 512, 40, 40), ì¶œë ¥ : (32, (1024, 20, 20)
  - [-1, 6, C3, [1024, True]]
  # ìž…ë ¥ : (32, 1024, 20, 20), ì¶œë ¥ : (32, (1024, 20 , 20)
  - [-1, 1, SPPF, [1024, 5]] # 9
  # ìž…ë ¥ : (32, 1024, 20, 20), ì¶œë ¥ : (32, (1024, 20, 20)

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  # ìž…ë ¥ : (32, 1024, 20, 20), ì¶œë ¥ : (32, (1024, 40, 40)

  - [[-1, 6], 1, Concat, [1]] # cat backbone P4
  # ìž…ë ¥ : (32, 1024, 40, 40), ì¶œë ¥ : (32, (1536, 40, 40)
  
  - [-1, 3, C2f, [512]] # 12
  # ìž…ë ¥ : (32, 1536, 40, 40), ì¶œë ¥ : (32, (512, 40, 40)
  
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  # ìž…ë ¥ : (32, 512, 40, 40), ì¶œë ¥ : (32, (512, 80, 80)
  
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3
  # ìž…ë ¥ : (32, 512, 80, 80), ì¶œë ¥ : (32, (768, 80, 80)
  
  - [-1, 3, C2f, [256]] # 15 (P3/8-small)
  # ìž…ë ¥: (32, 768, 80, 80), ì¶œë ¥ : (32, (256, 80, 80)
  
  - [-1, 1, Conv, [256, 3, 2]]
  # ìž…ë ¥ : (32, 256, 80, 80), ì¶œë ¥ : (32, (256, 40, 40)
  
  - [[-1, 12], 1, Concat, [1]] # cat head P4
  # ìž…ë ¥ : (32, 256, 40, 40), ì¶œë ¥ : (32, (768, 40, 40)
  
  - [-1, 3, C2f, [512]] # 18 (P4/16-medium)
  # ìž…ë ¥ : (32, 768, 40, 40), ì¶œë ¥ : (32, (512, 40, 40)
  
  - [-1, 1, Conv, [512, 3, 2]]
  # ìž…ë ¥ : (32, 512, 40, 40), ì¶œë ¥ : (32, (512, 20, 20)
  
  - [[-1, 9], 1, Concat, [1]] # cat head P5
  # ìž…ë ¥ : (32, 512, 20, 20), ì¶œë ¥ : (32, (1536, 20, 20)
  
  - [-1, 3, C2f, [1024]] # 21 (P5/32-large)
  # ìž…ë ¥ : (32, 1536, 20, 20), ì¶œë ¥ : (32, (1024, 20 20)
  
  - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)
