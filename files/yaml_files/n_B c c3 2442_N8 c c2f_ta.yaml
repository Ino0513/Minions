# Ultralytics YOLO ğŸš€, AGPL-3.0 license
# YOLOv5 object detection model with P3-P5 outputs. For details see https://docs.ultralytics.com/models/yolov5

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov5n.yaml' will call yolov5.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  # s: [0.33, 0.50, 1024]
  # m: [0.67, 0.75, 1024]
  # l: [1.00, 1.00, 1024]
  # x: [1.33, 1.25, 1024]

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  - [-1, 1, Conv, [64, 6, 2, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 2, C3, [128]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 4, C3, [256]]
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  - [-1, 4, C3, [512]]
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
  - [-1, 2, C3, [1024]]
  - [-1, 1, SPPF, [1024, 5]] # 9

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # => input: (32, 1024, 20, 20) / output: (32, 1024, 40, 40)
  - [[-1, 6], 1, Concat, [1]] # cat backbone P4 => input: (32, 1024, 40, 40) / output: (32, 1536, 40, 40)
  - [-1, 3, C2f, [512]] # 12  => input: (32, 1526, 40, 40) / output: (32, 512, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # => input: (512, 40, 40) / output: (512, 80, 80)
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3   => input: (512, 80, 80) / output: (768, 80, 80)
  - [-1, 3, C2f, [256]] # 15 (P3/8-small)         => input: (768, 80, 80) / output: (256, 80, 80)


  - [-1, 1, Conv, [256, 3, 2]] #                  => input: (256, 80, 80) / output: (256, 40, 40)
  - [[-1, 12], 1, Concat, [1]] # cat head P4      => input: (256, 40, 40) / output: (768, 40, 40)
  - [-1, 3, C2f, [512]] # 18 (P4/16-medium)       => input: (768, 40, 40) / output: (512, 40, 40)

  - [-1, 1, Conv, [512, 3, 2]] #                  => input: (512, 40, 40) / output:  (512, 20, 20)
  - [[-1, 9], 1, Concat, [1]] # cat head P5       => input: (512, 20, 20) / output: (1536, 20, 20)
  - [-1, 3, C2f, [1024]] # 21 (P5/32-large)       => input: (1536, 20, 20) / output: (1024, 20, 20)

  - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)
